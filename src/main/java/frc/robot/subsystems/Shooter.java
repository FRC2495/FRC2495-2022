/**
 * 
 */
package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.BaseMotorController;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;

import frc.robot.interfaces.*;
import frc.robot.commands.shooter.*;
import frc.robot.Robot;
//import frc.robot.sensors.Sonar;


/**
 * @author Joshua
 *
 */
public class Shooter extends Subsystem implements IShooter{
	/**
	 * 
	 */
	static final double MAX_PCT_OUTPUT = 1.0;
	static final double ALMOST_MAX_PCT_OUTPUT = 1.0;
	static final double HALF_PCT_OUTPUT = 0.5;
	static final double REDUCED_PCT_OUTPUT = 0.6;
	
	static final int WAIT_MS = 1000;
	static final int TIMEOUT_MS = 5000;

	static final int TALON_TIMEOUT_MS = 20;

	static final int SHOOT_DISTANCE_INCHES = 17;
	
	BaseMotorController shooterLeft; 
	
	// shared shoot settings
	private int onTargetCount; // counter indicating how many times/iterations we were on target
	private final static int ON_TARGET_MINIMUM_COUNT = 25; // number of times/iterations we need to be on target to really be on target
	
	boolean isShooting;
	
	Robot robot;
	
	
	public Shooter(BaseMotorController shooterLeft_in, Robot robot_in) {
		
		shooterLeft = shooterLeft_in;
		
		robot = robot_in;

		shooterLeft.configFactoryDefault();
		
		// Mode of operation during Neutral output may be set by using the setNeutralMode() function.
		// As of right now, there are two options when setting the neutral mode of a motor controller,
		// brake and coast.
		shooterLeft.setNeutralMode(NeutralMode.Coast);
		
		// Motor controller output direction can be set by calling the setInverted() function as seen below.
		// Note: Regardless of invert value, the LEDs will blink green when positive output is requested (by robot code or firmware closed loop).
		// Only the motor leads are inverted. This feature ensures that sensor phase and limit switches will properly match the LED pattern
		// (when LEDs are green => forward limit switch and soft limits are being checked).
		shooterLeft.setInverted(true);

		// Both the Talon SRX and Victor SPX have a follower feature that allows the motor controllers to mimic another motor controller's output.
		// Users will still need to set the motor controller's direction, and neutral mode.
		// The method follow() allows users to create a motor controller follower of not only the same model, but also other models
		// , talon to talon, victor to victor, talon to victor, and victor to talon.
		
		// set peak output to max in case if had been reduced previously
		setNominalAndPeakOutputs(MAX_PCT_OUTPUT);
	}
	
	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		setDefaultCommand(new ShooterStop());
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop

	}

	public void shootHigh() {
		shooterLeft.set(ControlMode.PercentOutput, -ALMOST_MAX_PCT_OUTPUT);
		
		isShooting = true;
		onTargetCount = 0;
	}

	public void shootLow() {
		shooterLeft.set(ControlMode.PercentOutput, -REDUCED_PCT_OUTPUT);
		
		isShooting = true;
		onTargetCount = 0;
	}
	
	public void stop() {
		shooterLeft.set(ControlMode.PercentOutput, 0);
		isShooting = false;
	}
	
		
	// NOTE THAT THIS METHOD WILL IMPACT BOTH OPEN AND CLOSED LOOP MODES
	public void setNominalAndPeakOutputs(double peakOutput)
	{
		shooterLeft.configPeakOutputForward(peakOutput, TALON_TIMEOUT_MS);
		shooterLeft.configPeakOutputReverse(-peakOutput, TALON_TIMEOUT_MS);

		shooterLeft.configNominalOutputForward(0, TALON_TIMEOUT_MS);
		shooterLeft.configNominalOutputReverse(0, TALON_TIMEOUT_MS);
	}
	
	public boolean isShooting(){
		return isShooting;
	}

	// for debug purpose only
	public void joystickControl(Joystick joystick)
	{
		shooterLeft.set(ControlMode.PercentOutput, joystick.getY());
	}
}










