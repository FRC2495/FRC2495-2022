/**
 * 
 */
package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.BaseMotorController;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;

import frc.robot.interfaces.*;
import frc.robot.commands.feeder.*;
import frc.robot.Robot;
//import frc.robot.sensors.Sonar;


/**
 * The {@code Feeder} class contains fields and methods pertaining to the function of the feeder.
 */
public class Feeder extends Subsystem implements IFeeder{
	/**
	 * 
	 */
	static final double MAX_PCT_OUTPUT = 1.0;
	static final double ALMOST_MAX_PCT_OUTPUT = 1.0;
	static final double HALF_PCT_OUTPUT = 0.5;
	static final double REDUCED_PCT_OUTPUT = 0.6;
	
	static final int TALON_TIMEOUT_MS = 20;

	BaseMotorController feederLeft; 	
	
	boolean isFeeding;
	
	Robot robot;
	

	/**
 	* The {@code Feeder} class contains fields and methods pertaining to the function of the feeder.
 	*/
	public Feeder(BaseMotorController feederLeft_in, Robot robot_in) {
		
		feederLeft = feederLeft_in;
		
		robot = robot_in;

		feederLeft.configFactoryDefault();
		
		// Mode of operation during Neutral output may be set by using the setNeutralMode() function.
		// As of right now, there are two options when setting the neutral mode of a motor controller,
		// brake and coast.
		feederLeft.setNeutralMode(NeutralMode.Coast);
		
		// Motor controller output direction can be set by calling the setInverted() function as seen below.
		// Note: Regardless of invert value, the LEDs will blink green when positive output is requested (by robot code or firmware closed loop).
		// Only the motor leads are inverted. This feature ensures that sensor phase and limit switches will properly match the LED pattern
		// (when LEDs are green => forward limit switch and soft limits are being checked).
		feederLeft.setInverted(false);
		
		// set peak output to max in case if had been reduced previously
		setNominalAndPeakOutputs(MAX_PCT_OUTPUT);
	}
	
	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		setDefaultCommand(new FeederStop());
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop
	}

	public void feed() {
		feederLeft.set(ControlMode.PercentOutput, +ALMOST_MAX_PCT_OUTPUT);
		
		isFeeding = true;
		//onTargetCount = 0;
	}
	
	public void stop() {
		feederLeft.set(ControlMode.PercentOutput, 0);

		isFeeding = false;
	}
	
		
	// NOTE THAT THIS METHOD WILL IMPACT BOTH OPEN AND CLOSED LOOP MODES
	public void setNominalAndPeakOutputs(double peakOutput)
	{
		feederLeft.configPeakOutputForward(peakOutput, TALON_TIMEOUT_MS);
		feederLeft.configPeakOutputReverse(-peakOutput, TALON_TIMEOUT_MS);

		feederLeft.configNominalOutputForward(0, TALON_TIMEOUT_MS);
		feederLeft.configNominalOutputReverse(0, TALON_TIMEOUT_MS);
	}
	
	public boolean isFeeding(){
		return isFeeding;
	}

	// for debug purpose only
	public void joystickControl(Joystick joystick)
	{
		feederLeft.set(ControlMode.PercentOutput, joystick.getY());
	}
}










